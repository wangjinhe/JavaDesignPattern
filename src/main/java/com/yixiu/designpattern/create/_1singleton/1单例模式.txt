【1】,单例模式（Singleton Pattern）
1 what
保证一个类仅有一个实例，并提供一个访问它的全局访问点。

2 why
(1)节约资源，因为只有一个实例。
(2)控制资源的使用,防止多线程并发访问相同资源出现问题。


3 when
参考：https://blog.csdn.net/hongtashan11/article/details/6403682
(1)数据库连接池
数据库连接是一种的数据库资源，频繁打开或者关闭数据库连接会引起效率的严重损耗，通过连接池控制数据库连接可以解决这个问题，
对一个程序来说，数据库连接池只需要一个实例就够了，因此应该设计为单例。

(2)windows文件管理器
由于Windows操作系统是一个典型的多进程多线程系统，那么在创建或者删除某个文件的时候，
就不可避免地出现多个进程或线程同时操作一个文件的现象。
采用单例模式设计的文件管理器就可以完美的解决这个问题，所有的文件操作都必须通过唯一的实例进行，这样就不会产生混乱的现象。

(3)打印机管理器
每台计算机可以有若干个打印机，如果每一个进程或者线程都独立地使用打印机资源的话，
那么我们打印出来的结果就有可能既包含这个打印任务的一部分，又包含另外一个打印任务的一部分。
所以，大多数的操作系统最终为打印任务设计了一个单例模式的假脱机服务Printer Spooler，
所有的打印任务都需要通过假脱机服务进行。

(4)
实际上，配置信息类、管理类、控制类、门面类、代理类通常被设计为单例类。
像Java的Struts、Spring框架，.Net的Spring.Net框架，以及Php的Zend框架都大量使用了单例模式。

4，how
如何正确地写出单例模式 ：    http://www.importnew.com/21141.html
(1)懒汉:刚开始不初始化，等到用的时候再初始化
(2)饿汉:程序启动时就初始化
(3)双重检验锁:有两次检查是否为null,当使用时再初始化
(4)静态内部类:通过返回静态内部类来实现懒汉加载
(5)枚举:通过枚举创建单例

总结
一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。
上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。
就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，
如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。

