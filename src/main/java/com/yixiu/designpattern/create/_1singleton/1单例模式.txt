单例模式（Singleton Pattern）
保证一个类仅有一个实例，并提供一个访问它的全局访问点。

何时使用

    当系统需要某个类只有一个实例的时候

优点
    单例模式的类唯一实例由其本身控制，可以很好的控制用户何时访问它。



如何正确地写出单例模式 ：    http://www.importnew.com/21141.html
(1)懒汉:刚开始不初始化，等到用的时候再初始化
(2)饿汉:程序启动时就初始化
(3)双重检验锁:有两次检查是否为null,当使用时再初始化
(4)静态内部类:通过返回静态内部类来实现懒汉加载
(5)枚举:通过枚举创建单例

总结
一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。
上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。
就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，
如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。