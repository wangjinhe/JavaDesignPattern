【2】工厂方法模式（Factory Method Pattern）

1，what
定义一个抽象产品和一个抽象工厂，通过具体工厂创建具体产品。

2，why
参考：https://www.zhihu.com/question/24843188?sort=created
设计模式的一个重要原则就是：别改代码，只需要添代码，以前所有的老代码，都是有价值的。
需要尽力保留new一个对象时，new的过程是宝贵的如何创建老对象的知识点（有的new很复杂，包括了很多参数），
如果这个代码被修改了，那么保留的老对象也不知道怎么使用了，整个体系残缺了所以要想办法保留老对象的new过程，
把这个new过程保存分布到一系列工厂类里，就是所谓的工厂模式。

一般有三种方式来封装

简单工厂：把对象的创建放到一个工厂类中，通过参数来创建不同的对象。
这个缺点是每添一个对象，就需要对简单工厂进行修改（尽管不是删代码，仅仅是添一个switch case，
但仍然违背了“不改代码”的原则；不过实际工作中，使用简单工厂的地方多一些）

工厂方法：每种产品由一种工厂来创建，一个工厂保存一个new基本完美，完全遵循
“不改代码”的原则

抽象工厂：仅仅是工厂方法的复杂化，保存了多个new大工程才用的上。

3，when
当我们在不同条件下需要创建不同实例时，使用工厂模式。

比如：
(1)日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。
(2)数据库访问类：访问可能是SQLSERVER、ORACLE等，用记可以选择创建访问不同的数据库。


4,列表的实现使用了工厂方法模式
一个列表需要的功能主要是增删改查和获取遍历器，遍历器实际上就是一个个具体的产品，不同的列表需要的遍历器不同，
通过模板方法让列表来控制生产遍历器，因此列表是工厂，遍历器是产品，不同的列表(具体工厂)可以生产不同的遍历器(具体产品)。

抽象产品:遍历器
抽象工厂:列表 List
具体工厂:
(1)数组列表 ArrayList  内部创建数组数组遍历器
(2)链表列表 LinkList   内存创建链表遍历器